{"ast":null,"code":"import _slicedToArray from\"/Users/parth/Desktop/web-dev/social-media-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext,useRef}from\"react\";import classes from\"./CreateComment.module.css\";import{Create_Post_Btn}from\"../../../ui/button/Button\";import{UserContext}from\"../../../context/userContext\";import{db}from\"../../../firebase/firebase\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CreateComment=function CreateComment(_ref){var id=_ref.id,comments=_ref.comments,onClickCommentInput=_ref.onClickCommentInput;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),comment=_useState2[0],setComment=_useState2[1];var _useState3=useState(comments?comments:[]),_useState4=_slicedToArray(_useState3,2),commentList=_useState4[0],setCommentList=_useState4[1];var _useContext$user=_slicedToArray(useContext(UserContext).user,1),user=_useContext$user[0];var commentRef=useRef();var addComment=function addComment(){if(comment!==\"\"){commentList.push({comment:comment,username:user.email.replace(\"@gmail.com\",\"\").toLowerCase()});db.collection(\"posts\").doc(id).update({comments:commentList}).then(function(){setComment(\"\");onClickCommentInput(false);console.log(\"comment added\");}).catch(function(error){return console.log(error.message);});}};return/*#__PURE__*/_jsxs(\"div\",{className:classes.create_comment_container,children:[/*#__PURE__*/_jsx(\"textarea\",{onChange:function onChange(){setComment(commentRef.current.value);},name:\"create_comment_field\",id:\"create_comment_field\",placeholder:\"enter comment here..\",value:comment,ref:commentRef,rows:\"2\",className:classes.createComment_textarea}),/*#__PURE__*/_jsx(Create_Post_Btn,{comment:comment,addComment:addComment})]});};export default CreateComment;","map":{"version":3,"sources":["/Users/parth/Desktop/web-dev/social-media-app/src/components/feed/create-comment/CreateComment.js"],"names":["React","useState","useContext","useRef","classes","Create_Post_Btn","UserContext","db","CreateComment","id","comments","onClickCommentInput","comment","setComment","commentList","setCommentList","user","commentRef","addComment","push","username","email","replace","toLowerCase","collection","doc","update","then","console","log","catch","error","message","create_comment_container","current","value","createComment_textarea"],"mappings":"gIAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,CAAsCC,MAAtC,KAAoD,OAApD,CACA,MAAOC,CAAAA,OAAP,KAAoB,4BAApB,CACA,OAASC,eAAT,KAAgC,2BAAhC,CACA,OAASC,WAAT,KAA4B,8BAA5B,CACA,OAASC,EAAT,KAAmB,4BAAnB,C,wFAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAA2C,IAAxCC,CAAAA,EAAwC,MAAxCA,EAAwC,CAApCC,QAAoC,MAApCA,QAAoC,CAA1BC,mBAA0B,MAA1BA,mBAA0B,CAC/D,cAA8BV,QAAQ,CAAC,EAAD,CAAtC,wCAAOW,OAAP,eAAgBC,UAAhB,eACA,eAAsCZ,QAAQ,CAACS,QAAQ,CAAGA,QAAH,CAAc,EAAvB,CAA9C,yCAAOI,WAAP,eAAoBC,cAApB,eACA,oCAAeb,UAAU,CAACI,WAAD,CAAV,CAAwBU,IAAvC,IAAOA,IAAP,qBAEA,GAAMC,CAAAA,UAAU,CAAGd,MAAM,EAAzB,CAEA,GAAMe,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB,GAAIN,OAAO,GAAK,EAAhB,CAAoB,CAClBE,WAAW,CAACK,IAAZ,CAAiB,CACfP,OAAO,CAAPA,OADe,CAEfQ,QAAQ,CAAEJ,IAAI,CAACK,KAAL,CAAWC,OAAX,CAAmB,YAAnB,CAAiC,EAAjC,EAAqCC,WAArC,EAFK,CAAjB,EAKAhB,EAAE,CAACiB,UAAH,CAAc,OAAd,EACGC,GADH,CACOhB,EADP,EAEGiB,MAFH,CAEU,CACNhB,QAAQ,CAAEI,WADJ,CAFV,EAKGa,IALH,CAKQ,UAAM,CACVd,UAAU,CAAC,EAAD,CAAV,CACAF,mBAAmB,CAAC,KAAD,CAAnB,CACAiB,OAAO,CAACC,GAAR,CAAY,eAAZ,EACD,CATH,EAUGC,KAVH,CAUS,SAACC,KAAD,QAAWH,CAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACC,OAAlB,CAAX,EAVT,EAWD,CACF,CAnBD,CAqBA,mBACE,aAAK,SAAS,CAAE5B,OAAO,CAAC6B,wBAAxB,wBACE,iBACE,QAAQ,CAAE,mBAAM,CACdpB,UAAU,CAACI,UAAU,CAACiB,OAAX,CAAmBC,KAApB,CAAV,CACD,CAHH,CAIE,IAAI,CAAC,sBAJP,CAKE,EAAE,CAAC,sBALL,CAME,WAAW,CAAC,sBANd,CAOE,KAAK,CAAEvB,OAPT,CAQE,GAAG,CAAEK,UARP,CASE,IAAI,CAAC,GATP,CAUE,SAAS,CAAEb,OAAO,CAACgC,sBAVrB,EADF,cAaE,KAAC,eAAD,EAAiB,OAAO,CAAExB,OAA1B,CAAmC,UAAU,CAAEM,UAA/C,EAbF,GADF,CAiBD,CA7CD,CA+CA,cAAeV,CAAAA,aAAf","sourcesContent":["import React, { useState, useContext, useRef } from \"react\";\nimport classes from \"./CreateComment.module.css\";\nimport { Create_Post_Btn } from \"../../../ui/button/Button\";\nimport { UserContext } from \"../../../context/userContext\";\nimport { db } from \"../../../firebase/firebase\";\n\nconst CreateComment = ({ id, comments, onClickCommentInput }) => {\n  const [comment, setComment] = useState(\"\");\n  const [commentList, setCommentList] = useState(comments ? comments : []);\n  const [user] = useContext(UserContext).user;\n\n  const commentRef = useRef();\n\n  const addComment = () => {\n    if (comment !== \"\") {\n      commentList.push({\n        comment,\n        username: user.email.replace(\"@gmail.com\", \"\").toLowerCase(),\n      });\n\n      db.collection(\"posts\")\n        .doc(id)\n        .update({\n          comments: commentList,\n        })\n        .then(() => {\n          setComment(\"\");\n          onClickCommentInput(false);\n          console.log(\"comment added\");\n        })\n        .catch((error) => console.log(error.message));\n    }\n  };\n\n  return (\n    <div className={classes.create_comment_container}>\n      <textarea\n        onChange={() => {\n          setComment(commentRef.current.value);\n        }}\n        name=\"create_comment_field\"\n        id=\"create_comment_field\"\n        placeholder=\"enter comment here..\"\n        value={comment}\n        ref={commentRef}\n        rows=\"2\"\n        className={classes.createComment_textarea}\n      ></textarea>\n      <Create_Post_Btn comment={comment} addComment={addComment} />\n    </div>\n  );\n};\n\nexport default CreateComment;\n"]},"metadata":{},"sourceType":"module"}